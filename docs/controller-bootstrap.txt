code scaffolding process:
	1. define types in types.go, add correct codegen tags:
		// +genclient - creates client code, always opt-in, put above types with metav1.TypeMeta except for List types
		// +k8s:register-gen - custom tag, creates register.go file, put over CR types (has TypeMeta, ObjectMeta, Spec, Status)
		// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object - put above types with metav1.TypeMeta
	2. create doc.go in same dir as types.go
	3. run hack/update-codegen.sh
		- all *-pkg-root vars must match the dir structure on your filesystem

controller:
	client:
		reflector: read k8s-apiserver, populate event queue
			client-go/tools/cache/Reflector, ListWatch/ListerWatcher, DeltaFIFO
		informer: read event queue, update cache and call correct event (delta) handler
			client-go/tools/cache/Controller, Controller.Run(), instantiated with [func New(c *Config) Controller]
		indexer [optional]: adds indexes to in-memory cache for faster lookups with large datasets
	
	executor:
		resource event handler (func handleObject): add object in question to workqueue (func enqueue),
		workqueue: store object reference plus delta
		process item: (func runWorker) read workqueue and process the item (func processNextWorkItem)
		
		
	integrative components:
		k8s.io/client-go/kubernetes/scheme (maps Go types to GVKs)
		custom clientset, ~= k8s.io/client-go/kubernetes/typed/core/v1/PodInterface (query k8s-apiserver)
		k8s.io/client-go/tools/record (creates and reports Events for objects)
		
		
		
	functional components:
		client-go/tools/cache.SharedIndexInformer 
			- provides eventually consistent linkage of its clients to the authoritative state of a given collection of objects of a particular API group and kind/resource
			- maintains a local cache of the state of each relevant object which is eventually consistent with the authoritative state
			client-go/tools/cache.Reflector
		
		client-go/util/workqueue
			- holds references for objects that need to be reconciled

		handler (handcrafted)
			- compares actual state (Status field) with desired, attempts to converge the two, then updates the Status field

	




Go construct		< -- >		Controller construct
client-go/tools/cache			Reflector
	Lister							query k8s-apiserver and list all resources of a given type
	Watcher							watch those resources for changes
	Store							DeltaFIFO queue


controller constructor workflow (func NewController(...)):
	1. add custom controller types to the default k8s Scheme so Events can be logged for custom types
	2. create Event broadcaster
	3. add event handlers to the Informer
	
controller inner execution workflow (func (c *Controller) Run(...)):
	1. defer error exit handling calls
	2. [opinion] install CRDs
	3. start Informer factories (one for each Informer) to begin populating Informer caches and wait for them to sync
	4. launch workers (infite loop of processing items on workqueue)
	
controller outer execution workflow (func main()):
	1. instantiate k8s and custom clientsets
	2. create k8s and custom InformerFactorys (because they need a client to be instantiated)
	3. call NewController()
	4. start InformerFactorys
	